{
	"info": {
		"_postman_id": "fdd2266a-1fe1-4429-b57c-0bb65f188538",
		"name": "EcommerceWebsiteAPITests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2861662"
	},
	"item": [
		{
			"name": "SmokeTests",
			"item": [
				{
					"name": "Products",
					"item": [
						{
							"name": "Admin",
							"item": [
								{
									"name": "LogInAdmin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"const adminToken = responseJson.token;",
													"const adminRole = responseJson.role;",
													"",
													"if(adminToken) {",
													"    pm.collectionVariables.set(\"adminToken\", adminToken);",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response).to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response contains the ADMIN role\", function () {",
													"    pm.expect(pm.response.text()).to.include(adminRole);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{adminEmail}}\",\n    \"password\": \"{{adminPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/auth/login",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "PostAndDeleteProduct",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"// POST verification",
													"",
													"pm.test(\"Product has required fields\", function () {",
													"    let productKeys = Object.keys(responseJson);",
													"    pm.expect(productKeys).to.have.members([\"id\", \"name\", \"description\", \"price\", \"imageUrl\", \"stock\"]);",
													"});",
													"",
													"// DELETE request and verification",
													"",
													"const productID = responseJson.id;",
													"const baseURL = pm.collectionVariables.get(\"baseURL\");",
													"",
													"const deleteRequest = {",
													"  url: `${baseURL}/product/${productID}`,",
													"  method: \"DELETE\",",
													"  header: {",
													"    \"Content-Type\": \"application/json\",",
													"    \"Authorization\": \"Bearer \" + pm.collectionVariables.get(\"adminToken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(deleteRequest, (error, response) => {",
													"  if (error) {",
													"    console.log(error);",
													"  }",
													"",
													"  pm.test(\"Response should be okay to process\", () => {",
													"    pm.expect(error).to.equal(null);",
													"    pm.expect(response).to.have.property(\"code\", 200);",
													"    pm.expect(response).to.have.property(\"status\", \"OK\");",
													"  });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let randProduct = pm.variables.replaceIn(\"{{$randomProduct}}\");",
													"pm.variables.set(\"randProduct\", randProduct);",
													"",
													"let randParagraph = pm.variables.replaceIn(\"{{$randomLoremParagraph}}\");",
													"pm.variables.set(\"randParagraph\", randParagraph);",
													"",
													"let randPrice = pm.variables.replaceIn(\"{{$randomPrice}}\");",
													"pm.variables.set(\"randPrice\", randPrice);",
													"",
													"let randInt = pm.variables.replaceIn(\"{{$randomInt}}\");",
													"pm.variables.set(\"randInt\", randInt);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{adminToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{randProduct}}\",\n    \"description\": \"{{randParagraph}}\",\n    \"price\": \"{{randPrice}}\",\n    \"imageUrl\": \"/products/product-1.jpeg\",\n    \"stock\": \"{{randInt}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/products",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Customer",
							"item": [
								{
									"name": "LogInCustomer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"const customerToken = responseJson.token;",
													"const customerRole = responseJson.role;",
													"",
													"if(customerToken) {",
													"    pm.collectionVariables.set(\"customerToken\", customerToken);",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response).to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response contains the USER role\", function () {",
													"    pm.expect(pm.response.text()).to.include(customerRole);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{customerEmail}}\",\n    \"password\": \"{{customerPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/auth/login",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetProductList",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"const responseJson = pm.response.json();",
													"",
													"pm.test(\"Each product has required fields\", function () {",
													"    let x;",
													"    for (x in responseJson) {",
													"        let productKeys = Object.keys(responseJson[x]);",
													"        pm.expect(productKeys).to.have.members([\"id\", \"name\", \"description\", \"price\", \"imageUrl\", \"stock\"]);",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{customerToken}}"
											}
										],
										"url": {
											"raw": "{{baseURL}}/products",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetSingleProduct",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response).to.have.status(200);",
													"});",
													"",
													"",
													"const responseJson = pm.response.json();",
													"",
													"pm.test(\"Product has required fields\", function () {",
													"    let customerKeys = Object.keys(responseJson);",
													"    pm.expect(customerKeys).to.have.members([\"id\", \"name\", \"description\", \"price\", \"imageUrl\", \"stock\"]);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{customerToken}}"
											}
										],
										"url": {
											"raw": "{{baseURL}}/product/{{productID}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"product",
												"{{productID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Customer",
							"item": [
								{
									"name": "LogInCustomer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"const customerToken = responseJson.token;",
													"const customerRole = responseJson.role;",
													"",
													"if(customerToken) {",
													"    pm.collectionVariables.set(\"customerToken\", customerToken);",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response).to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response contains the USER role\", function () {",
													"    pm.expect(pm.response.text()).to.include(customerRole);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{customerEmail}}\",\n    \"password\": \"{{customerPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/auth/login",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "RegisterCustomer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Post response is OK\", function () {",
													"    pm.expect(pm.response).to.have.status(\"OK\");",
													"});",
													"",
													"",
													"const responseJson = pm.response.json();",
													"",
													"pm.test(\"Customer has required fields\", function () {",
													"    let customerKeys = Object.keys(responseJson);",
													"    pm.expect(customerKeys).to.have.members([\"id\", \"name\", \"email\", \"password\", \"role\"]);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let randomPass = pm.variables.replaceIn(\"{{$randomPassword}}\");",
													"pm.variables.set(\"randomPass\", randomPass);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{randomPass}}\",\n    \"confirmPassword\": \"{{randomPass}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/auth/signup",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"auth",
												"signup"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Admin",
							"item": [
								{
									"name": "LogInAdmin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseJson = pm.response.json();",
													"const adminToken = responseJson.token;",
													"const adminRole = responseJson.role;",
													"",
													"if(adminToken) {",
													"    pm.collectionVariables.set(\"adminToken\", adminToken);",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.expect(pm.response).to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response contains the ADMIN role\", function () {",
													"    pm.expect(pm.response.text()).to.include(adminRole);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{adminEmail}}\",\n    \"password\": \"{{adminPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/auth/login",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"auth",
												"login"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Workflows",
			"item": [
				{
					"name": "Customer",
					"item": [
						{
							"name": "Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Post response is OK\", function () {",
											"    pm.expect(pm.response).to.have.status(\"OK\");",
											"});",
											"",
											"",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set(\"userEmailWorkflow\", responseJson.email);",
											"",
											"pm.test(\"Customer has required fields\", function () {",
											"    let customerKeys = Object.keys(responseJson);",
											"    pm.expect(customerKeys).to.have.members([\"id\", \"name\", \"email\", \"password\", \"role\"]);",
											"});",
											"",
											"",
											"pm.execution.setNextRequest(\"LogIn\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomPass = pm.variables.replaceIn(\"{{$randomPassword}}\");",
											"pm.variables.set(\"randomPass\", randomPass);",
											"pm.collectionVariables.set(\"userPassWorkflow\", randomPass);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{randomPass}}\",\n    \"confirmPassword\": \"{{randomPass}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/auth/signup",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "LogIn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();",
											"const userTokenWorkflow = responseJson.token;",
											"const userRoleWorkflow = responseJson.role;",
											"",
											"if(userTokenWorkflow) {",
											"    pm.collectionVariables.set(\"userTokenWorkflow\", userTokenWorkflow);",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response contains the USER role\", function () {",
											"    pm.expect(pm.response.text()).to.include(userRoleWorkflow);",
											"});",
											"",
											"",
											"pm.execution.setNextRequest(\"GetOneProduct\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{userEmailWorkflow}}\",\n    \"password\": \"{{userPassWorkflow}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/auth/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetOneProduct",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"",
											"const responseJson = pm.response.json();",
											"",
											"pm.test(\"Product has required fields\", function () {",
											"    let customerKeys = Object.keys(responseJson);",
											"    pm.expect(customerKeys).to.have.members([\"id\", \"name\", \"description\", \"price\", \"imageUrl\", \"stock\"]);",
											"});",
											"",
											"",
											"pm.execution.setNextRequest(\"AddProductToCart\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{userTokenWorkflow}}"
									}
								],
								"url": {
									"raw": "{{baseURL}}/product/{{productID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"product",
										"{{productID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "AddProductToCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"userId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"total\": {",
											"      \"type\": \"number\"",
											"    },",
											"    \"cartProducts\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"productId\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"name\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageUrl\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"price\": {",
											"              \"type\": \"number\"",
											"            },",
											"            \"quantity\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"cart\": {",
											"              \"type\": \"null\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"id\",",
											"            \"productId\",",
											"            \"name\",",
											"            \"imageUrl\",",
											"            \"price\",",
											"            \"quantity\",",
											"            \"cart\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"id\",",
											"    \"userId\",",
											"    \"total\",",
											"    \"cartProducts\"",
											"  ]",
											"};",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Cart has required JSON shcema\", function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											"pm.execution.setNextRequest(\"GetCart\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{userTokenWorkflow}}"
									}
								],
								"url": {
									"raw": "{{baseURL}}/cart/{{productID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"cart",
										"{{productID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.execution.setNextRequest(\"PlaceOrder\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{userTokenWorkflow}}"
									}
								],
								"url": {
									"raw": "{{baseURL}}/cart",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"cart"
									]
								}
							},
							"response": []
						},
						{
							"name": "PlaceOrder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"userId\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"total\": {",
											"      \"type\": \"number\"",
											"    },",
											"    \"address\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"paymentMethod\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"date\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"orderProducts\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"productId\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"name\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"imageUrl\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"price\": {",
											"              \"type\": \"number\"",
											"            },",
											"            \"quantity\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"order\": {",
											"              \"type\": \"null\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"id\",",
											"            \"productId\",",
											"            \"name\",",
											"            \"imageUrl\",",
											"            \"price\",",
											"            \"quantity\",",
											"            \"order\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"id\",",
											"    \"userId\",",
											"    \"total\",",
											"    \"address\",",
											"    \"paymentMethod\",",
											"    \"date\",",
											"    \"orderProducts\"",
											"  ]",
											"};",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.expect(pm.response).to.have.status(200);",
											"});",
											"",
											"pm.test(\"Order has required JSON shcema\", function () {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{userTokenWorkflow}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"address\": \"{{$randomStreetAddress}}\",\n    \"paymentMethod\": \"Cash on Delivery (COD)\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/order",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"order"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://localhost:8080/v1",
			"type": "string"
		},
		{
			"key": "customerEmail",
			"value": "customer@test.com",
			"type": "string"
		},
		{
			"key": "customerPassword",
			"value": "test123",
			"type": "string"
		},
		{
			"key": "adminEmail",
			"value": "admin@test.com",
			"type": "string"
		},
		{
			"key": "adminPassword",
			"value": "test123",
			"type": "string"
		},
		{
			"key": "customerToken",
			"value": ""
		},
		{
			"key": "adminToken",
			"value": ""
		},
		{
			"key": "productID",
			"value": "1",
			"type": "string"
		},
		{
			"key": "userEmailWorkflow",
			"value": ""
		},
		{
			"key": "userPassWorkflow",
			"value": ""
		},
		{
			"key": "userTokenWorkflow",
			"value": ""
		}
	]
}